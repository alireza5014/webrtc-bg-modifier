{"version":3,"file":"index.modern.js","sources":["../src/index.js"],"sourcesContent":["class WebrtcBgModifier {\n    constructor() {\n        this.scriptLoaded = false;\n        this.segmentation = null;\n        this.url = null;\n        this.color = null;\n        this.stream = null;\n        this.brightness = 1;\n        this.contrast = 1;\n        this.grayScale = false;\n        this.blur = 0;\n        this.videoElement = document.createElement(\"video\");\n        this.canvasElement = document.createElement(\"canvas\");\n    }\n\n    // Setters for background properties\n    setBrightness(value) {\n        this.brightness = +value;\n        return this;\n    }\n\n    setContrast(value) {\n        this.contrast = +value;\n        return this;\n    }\n    setBlur(value) {\n        this.blur = +value+\"px\";\n        return this;\n    }\n\n    setGrayScale(value) {\n        this.grayScale = value;\n        return this;\n    }\n\n    setStream(stream) {\n        this.stream = stream;\n        return this;\n    }\n\n    setBackgroundImage(url) {\n        this.url = url;\n        this.color = null;\n        return this;\n    }\n\n    setBackgroundColor(color) {\n        this.color = color;\n        return this;\n    }\n\n    // Appends a script to the document head, ensuring it loads only once\n    async appendScriptToHead(src, {\n        async = true, defer = false, callback = () => {\n        }\n    } = {}) {\n        if (this.scriptLoaded) {\n            await  callback();\n            return;\n        }\n\n        const script = document.createElement('script');\n        script.src = src;\n        script.async = async;\n        script.defer = defer;\n        script.onload =async () => {\n            this.scriptLoaded = true;\n          await  callback();\n        };\n        script.onerror = () => console.error(`Failed to load script: ${src}`);\n        document.head.appendChild(script);\n    }\n\n    // Handles background image replacement logic\n    applyBackgroundImage(ctx, results, backgroundImage) {\n        const {videoWidth: width, videoHeight: height} = this.videoElement;\n        ctx.clearRect(0, 0, width, height);\n        ctx.filter = `brightness(${this.brightness}) contrast(${this.contrast}) blur(${this.blur})`;\n\n        ctx.drawImage(results.segmentationMask, 0, 0, width, height);\n        ctx.globalCompositeOperation = 'source-out';\n\n        ctx.drawImage(backgroundImage ? backgroundImage : this.videoElement, 0, 0, width, height);\n        ctx.globalCompositeOperation = 'destination-atop';\n\n        ctx.filter = `brightness(${this.brightness}) contrast(${this.contrast})`\n        ctx.drawImage(results.image, 0, 0, width, height);\n    }\n\n    // Adjusts brightness and contrast for the video\n    applyBrightnessAndContrast(ctx) {\n        ctx.filter = `brightness(${this.brightness}) contrast(${this.contrast}) `;\n    }\n\n    // Applies a solid background color\n    applyBackgroundColor(ctx, results) {\n        const {videoWidth: width, videoHeight: height} = this.videoElement;\n        ctx.clearRect(0, 0, width, height);\n        ctx.drawImage(results.segmentationMask, 0, 0, width, height);\n        ctx.globalCompositeOperation = 'source-out';\n        ctx.fillStyle = this.color;\n        ctx.fillRect(0, 0, width, height);\n        ctx.globalCompositeOperation = 'destination-atop';\n        ctx.drawImage(results.image, 0, 0, width, height);\n    }\n\n\n    // Applies a grayscale effect\n    applyGrayscale(ctx) {\n        const {videoWidth: width, videoHeight: height} = this.videoElement;\n        const imageData = ctx.getImageData(0, 0, width, height);\n        const data = imageData.data;\n\n        for (let i = 0; i < data.length; i += 4) {\n            const avg = (data[i] + data[i + 1] + data[i + 2]) / 3;\n            data[i] = data[i + 1] = data[i + 2] = avg;\n        }\n\n        ctx.putImageData(imageData, 0, 0);\n    }\n\n    // Generates a list of available backgrounds\n    backgroundList() {\n        return {\n            color: [\n                {value: '#F9C0AB', alt: '#F9C0AB'},\n                {value: '#F4E0AF', alt: '#F4E0AF'},\n                {value: '#A8CD89', alt: '#A8CD89'},\n                {value: '#355F2E', alt: '#355F2E'},\n            ],\n            image: [\n                {value: 'img/1.jpg', alt: 'Image 1'},\n                {value: 'img/2.jpg', alt: 'Image 2'},\n                {value: 'img/3.jpg', alt: 'Image 3'},\n            ],\n        };\n    }\n\n    // Initializes the segmentation process\n    async setupSegmentation(ctx, backgroundImage) {\n        await this.appendScriptToHead('https://cdn.jsdelivr.net/npm/@mediapipe/selfie_segmentation/selfie_segmentation.js', {\n            async: true,\n            callback: async () => {\n                if(this.segmentation){\n                    this.segmentation.close()\n                    this.segmentation=null\n                }\n                    this.segmentation = new SelfieSegmentation({\n                        locateFile: (file) => `/node_modules/@mediapipe/selfie_segmentation/${file}`,\n                        // locateFile: (file) => `https://cdn.jsdelivr.net/npm/@mediapipe/selfie_segmentation/${file}`,\n                    });\n\n\n                this.segmentation.setOptions({modelSelection: 1});\n\n                this.segmentation.onResults((results) => {\n                    if (this.color) {\n                        this.applyBackgroundColor(ctx, results);\n                        this.applyBrightnessAndContrast(ctx);\n                    } else {\n                        this.applyBackgroundImage(ctx, results, backgroundImage);\n                    }\n\n                    if (this.grayScale) {\n                        this.applyGrayscale(ctx);\n                    }\n                    // this.applyBrightnessAndContrast(ctx);\n                });\n\n                await  this.segmentation.initialize();\n\n                const processVideo = async () => {\n                    await  this.segmentation.send({image: this.videoElement});\n                    requestAnimationFrame(processVideo);\n                };\n\n                await processVideo();\n            },\n        });\n    }\n\n    // Main function to modify the video stream\n    async changeBackground() {\n        this.videoElement.srcObject = this.stream;\n        this.videoElement.play();\n\n        await new Promise((resolve) => (this.videoElement.onloadeddata = resolve));\n\n        const {videoWidth: width, videoHeight: height} = this.videoElement;\n        this.canvasElement.width = width;\n        this.canvasElement.height = height;\n        const ctx = this.canvasElement.getContext('2d');\n\n        if (!this.url && !this.grayScale && this.brightness === 1 && this.contrast === 1 && !this.color && !this.blur) {\n            return this.stream; // No modifications, return original stream\n        }\n\n        let backgroundImage = null;\n        if (this.url) {\n            backgroundImage = new Image();\n            backgroundImage.src = this.url;\n            await new Promise((resolve) => (backgroundImage.onload = resolve));\n        }\n\n        await this.setupSegmentation(ctx, backgroundImage);\n        return this.canvasElement.captureStream(30);\n    }\n}\n\nexport default WebrtcBgModifier;"],"names":["WebrtcBgModifier","constructor","this","scriptLoaded","segmentation","url","color","stream","brightness","contrast","grayScale","blur","videoElement","document","createElement","canvasElement","setBrightness","value","setContrast","setBlur","setGrayScale","setStream","setBackgroundImage","setBackgroundColor","appendScriptToHead","src","async","defer","callback","_this","script","onload","onerror","console","error","head","appendChild","applyBackgroundImage","ctx","results","backgroundImage","videoWidth","width","videoHeight","height","clearRect","filter","drawImage","segmentationMask","globalCompositeOperation","image","applyBrightnessAndContrast","applyBackgroundColor","fillStyle","fillRect","applyGrayscale","imageData","getImageData","data","i","length","putImageData","backgroundList","alt","setupSegmentation","_this2","close","SelfieSegmentation","locateFile","file","setOptions","modelSelection","onResults","initialize","processVideo","send","requestAnimationFrame","changeBackground","srcObject","play","Promise","resolve","onloadeddata","getContext","Image","captureStream"],"mappings":"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"}