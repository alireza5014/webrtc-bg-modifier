{"version":3,"file":"index.modern.mjs","sources":["../src/index.js"],"sourcesContent":["class WebrtcBgModifier {\n    constructor() {\n        this.scriptLoaded = false;\n        this.segmentation = null;\n        this.url = null;\n        this.camera = null;\n        this.backgroundImage = null;\n        this.color = null;\n        this.stream = null;\n        this.brightness = 1;\n        this.contrast = 1;\n        this.grayScale = false;\n        this.blur = 0;\n        this.videoElement = document.createElement(\"video\");\n        this.canvasElement = document.createElement(\"canvas\");\n    }\n\n    // Setters for background properties\n    setBackgroundImage2(value) {\n        this.backgroundImage = value;\n        return this;\n    }\n\n    getBackgroundImage() {\n        return  this.backgroundImage\n     }\n    setBrightness(value) {\n        this.brightness = +value;\n        return this;\n    }\n\n    setContrast(value) {\n        this.contrast = +value;\n        return this;\n    }\n    setBlur(value) {\n        this.blur = +value+\"px\";\n        return this;\n    }\n\n    setGrayScale(value) {\n        this.grayScale = value;\n        return this;\n    }\n\n    setStream(stream) {\n        this.stream = stream;\n        return this;\n    }\n\n    setBackgroundImage(url) {\n        this.url = url;\n        this.color = null;\n        return this;\n    }\n\n    setBackgroundColor(color) {\n        this.color = color;\n\n        return this;\n    }\n\n    // Appends a script to the document head, ensuring it loads only once\n    async appendScriptToHead(src, {\n        async = true, defer = false, callback = () => {\n        }\n    } = {}) {\n        if (this.scriptLoaded) {\n            await  callback();\n            return;\n        }\n\n        const script = document.createElement('script');\n        script.src = src;\n        script.async = async;\n        script.defer = defer;\n        script.onload =async () => {\n            this.scriptLoaded = true;\n          await  callback();\n        };\n        script.onerror = () => console.error(`Failed to load script: ${src}`);\n        document.head.appendChild(script);\n    }\n\n    // Handles background image replacement logic\n    applyBackgroundImage(ctx, results) {\n        const {videoWidth: width, videoHeight: height} = this.videoElement;\n        ctx.clearRect(0, 0, width, height);\n        ctx.filter = `brightness(${this.brightness}) contrast(${this.contrast}) blur(${this.blur})`;\n\n        ctx.drawImage(results.segmentationMask, 0, 0, width, height);\n        ctx.globalCompositeOperation = 'source-out';\n\n        ctx.drawImage(this.getBackgroundImage() ? this.getBackgroundImage() : this.videoElement, 0, 0, width, height);\n        ctx.globalCompositeOperation = 'destination-atop';\n\n        ctx.filter = `brightness(${this.brightness}) contrast(${this.contrast})`\n        ctx.drawImage(results.image, 0, 0, width, height);\n\n    }\n\n    // Adjusts brightness and contrast for the video\n    applyBrightnessAndContrast(ctx) {\n        ctx.filter = `brightness(${this.brightness}) contrast(${this.contrast}) `;\n    }\n\n    // Applies a solid background color\n    applyBackgroundColor(ctx, results) {\n        const {videoWidth: width, videoHeight: height} = this.videoElement;\n        ctx.clearRect(0, 0, width, height);\n        ctx.drawImage(results.segmentationMask, 0, 0, width, height);\n        ctx.globalCompositeOperation = 'source-out';\n        ctx.fillStyle = this.color;\n        ctx.fillRect(0, 0, width, height);\n        ctx.globalCompositeOperation = 'destination-atop';\n        ctx.drawImage(results.image, 0, 0, width, height);\n    }\n\n\n    // Applies a grayscale effect\n    applyGrayscale(ctx) {\n        const {videoWidth: width, videoHeight: height} = this.videoElement;\n        const imageData = ctx.getImageData(0, 0, width, height);\n        const data = imageData.data;\n\n        for (let i = 0; i < data.length; i += 4) {\n            const avg = (data[i] + data[i + 1] + data[i + 2]) / 3;\n            data[i] = data[i + 1] = data[i + 2] = avg;\n        }\n\n        ctx.putImageData(imageData, 0, 0);\n    }\n\n    // Generates a list of available backgrounds\n    backgroundList() {\n        return {\n            color: [\n                {value: '#F9C0AB', alt: '#F9C0AB'},\n                {value: '#F4E0AF', alt: '#F4E0AF'},\n                {value: '#A8CD89', alt: '#A8CD89'},\n                {value: '#355F2E', alt: '#355F2E'},\n            ],\n            image: [\n                {value: 'img/1.jpg', alt: 'Image 1'},\n                {value: 'img/2.jpg', alt: 'Image 2'},\n                {value: 'img/3.jpg', alt: 'Image 3'},\n            ],\n        };\n    }\n\n    // Initializes the segmentation process\n    async setupSegmentation(ctx) {\n       const backgroundImage= this.getBackgroundImage()\n        await this.appendScriptToHead('https://cdn.jsdelivr.net/npm/@mediapipe/selfie_segmentation/selfie_segmentation.js', {\n            async: true,\n            callback: async () => {\n                if (!this.segmentation) {\n                    this.segmentation = new SelfieSegmentation({\n                        // locateFile: (file) => `/node_modules/@mediapipe/selfie_segmentation/${file}`,\n                        locateFile: (file) => `https://cdn.jsdelivr.net/npm/@mediapipe/selfie_segmentation/${file}`,\n                    });\n\n\n                    this.segmentation.setOptions({\n                        selfieMode: true,\n                        modelSelection: 0,\n\n                        // effect: \"background\"\n                    });\n\n                    this.segmentation.onResults((results) => {\n                        console.log(results)\n                        if (this.color) {\n                            this.applyBackgroundColor(ctx, results);\n                            this.applyBrightnessAndContrast(ctx);\n                        } else {\n                            this.applyBackgroundImage(ctx, results, backgroundImage);\n\n                        }\n\n                        if (this.grayScale) {\n                            this.applyGrayscale(ctx);\n                        }\n                        // this.applyBrightnessAndContrast(ctx);\n                    });\n\n\n\n                    await this.segmentation.initialize();\n                    //\n                    // const processVideo = async () => {\n                    //     await this.segmentation.send({image: this.videoElement});\n                    //     requestAnimationFrame(processVideo);\n                    // };\n                    //\n                    // await processVideo();\n\n\n                    const processVideo = async () => {\n                        const start = performance.now();\n                        await this.segmentation.send({ image: this.videoElement });\n\n                        // Calculate the remaining time to maintain a 24 FPS rate\n                        const elapsed = performance.now() - start;\n                        const delay = Math.max(0, (1000 / 24) - elapsed);\n\n                        setTimeout(() => requestAnimationFrame(processVideo), delay);\n                    };\n\n                    await processVideo();\n\n\n                }\n                // if (!this.camera) {\n                //     this.camera = new Camera(this.videoElement, {\n                //         onFrame: async () => {\n                //             await this.segmentation.send({ image: this.videoElement });\n                //         },\n                //         width: 1280,\n                //         height: 720,\n                //     });\n                // }\n                //\n                // this.camera.start();\n            },\n        });\n    }\n\n    // Main function to modify the video stream\n    async changeBackground() {\n\n        console.log(  this.url,'11111')\n        if(!this.videoElement.srcObject) {\n            this.videoElement.srcObject = this.stream;\n            this.videoElement.play();\n            await new Promise((resolve) => (this.videoElement.onloadeddata = resolve));\n\n        }\n\n\n        const {videoWidth: width, videoHeight: height} = this.videoElement;\n        this.canvasElement.width = width;\n        this.canvasElement.height = height;\n        const ctx = this.canvasElement.getContext('2d');\n\n        if (!this.url && !this.grayScale && this.brightness === 1 && this.contrast === 1 && !this.color && !this.blur) {\n\n                this.camera?.stop()\n\n            return this.stream; // No modifications, return original stream\n        }\n\n        let backgroundImage = null;\n        if (this.url) {\n              backgroundImage = new Image();\n            backgroundImage.src = this.url;\n             await new Promise((resolve) => (backgroundImage.onload = resolve));\n            this.setBackgroundImage2(backgroundImage)\n\n        }\n        this.setBackgroundImage2(backgroundImage)\n        await this.setupSegmentation(ctx);\n        return  this.canvasElement.captureStream(24);\n    }\n}\n\nexport default WebrtcBgModifier;"],"names":["WebrtcBgModifier","constructor","this","scriptLoaded","segmentation","url","camera","backgroundImage","color","stream","brightness","contrast","grayScale","blur","videoElement","document","createElement","canvasElement","setBackgroundImage2","value","getBackgroundImage","setBrightness","setContrast","setBlur","setGrayScale","setStream","setBackgroundImage","setBackgroundColor","appendScriptToHead","src","async","defer","callback","_this","script","onload","onerror","console","error","head","appendChild","applyBackgroundImage","ctx","results","videoWidth","width","videoHeight","height","clearRect","filter","drawImage","segmentationMask","globalCompositeOperation","image","applyBrightnessAndContrast","applyBackgroundColor","fillStyle","fillRect","applyGrayscale","imageData","getImageData","data","i","length","putImageData","backgroundList","alt","setupSegmentation","_this2","SelfieSegmentation","locateFile","file","setOptions","selfieMode","modelSelection","onResults","log","initialize","processVideo","start","performance","now","send","elapsed","delay","Math","max","setTimeout","requestAnimationFrame","changeBackground","srcObject","play","Promise","resolve","onloadeddata","getContext","_this$camera","stop","Image","captureStream"],"mappings":"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"}