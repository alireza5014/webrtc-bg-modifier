{"version":3,"file":"index.js","sources":["../src/index.js"],"sourcesContent":["class WebrtcBgModifier {\n    constructor() {\n        this.scriptLoaded = false;\n        this.segmentation = null;\n        this.url = null;\n        this.camera = null;\n        this.backgroundImage = null;\n        this.color = null;\n        this.stream = null;\n        this.brightness = 1;\n        this.contrast = 1;\n        this.grayScale = false;\n        this.blur = 0;\n        this.videoElement = document.createElement(\"video\");\n        this.canvasElement = document.createElement(\"canvas\");\n    }\n\n    // Setters for background properties\n    setBackgroundImage2(value) {\n        this.backgroundImage = value;\n        return this;\n    }\n\n    getBackgroundImage() {\n        return  this.backgroundImage\n     }\n    setBrightness(value) {\n        this.brightness = +value;\n        return this;\n    }\n\n    setContrast(value) {\n        this.contrast = +value;\n        return this;\n    }\n    setBlur(value) {\n        this.blur = +value+\"px\";\n        return this;\n    }\n\n    setGrayScale(value) {\n        this.grayScale = value;\n        return this;\n    }\n\n    setStream(stream) {\n        this.stream = stream;\n        return this;\n    }\n\n    setBackgroundImage(url) {\n        this.url = url;\n        this.color = null;\n        return this;\n    }\n\n    setBackgroundColor(color) {\n        this.color = color;\n\n        return this;\n    }\n\n    // Appends a script to the document head, ensuring it loads only once\n    async appendScriptToHead(src, {\n        async = true, defer = false, callback = () => {\n        }\n    } = {}) {\n        if (this.scriptLoaded) {\n            await  callback();\n            return;\n        }\n\n        const script = document.createElement('script');\n        script.src = src;\n        script.async = async;\n        script.defer = defer;\n        script.onload =async () => {\n            this.scriptLoaded = true;\n          await  callback();\n        };\n        script.onerror = () => console.error(`Failed to load script: ${src}`);\n        document.head.appendChild(script);\n    }\n\n    // Handles background image replacement logic\n    applyBackgroundImage(ctx, results) {\n        const {videoWidth: width, videoHeight: height} = this.videoElement;\n        ctx.clearRect(0, 0, width, height);\n        ctx.filter = `brightness(${this.brightness}) contrast(${this.contrast}) blur(${this.blur})`;\n\n        ctx.drawImage(results.segmentationMask, 0, 0, width, height);\n        ctx.globalCompositeOperation = 'source-out';\n\n        ctx.drawImage(this.getBackgroundImage() ? this.getBackgroundImage() : this.videoElement, 0, 0, width, height);\n        ctx.globalCompositeOperation = 'destination-atop';\n\n        ctx.filter = `brightness(${this.brightness}) contrast(${this.contrast})`\n        ctx.drawImage(results.image, 0, 0, width, height);\n\n    }\n\n    // Adjusts brightness and contrast for the video\n    applyBrightnessAndContrast(ctx) {\n        ctx.filter = `brightness(${this.brightness}) contrast(${this.contrast}) `;\n    }\n\n    // Applies a solid background color\n    applyBackgroundColor(ctx, results) {\n        const {videoWidth: width, videoHeight: height} = this.videoElement;\n        ctx.clearRect(0, 0, width, height);\n        ctx.drawImage(results.segmentationMask, 0, 0, width, height);\n        ctx.globalCompositeOperation = 'source-out';\n        ctx.fillStyle = this.color;\n        ctx.fillRect(0, 0, width, height);\n        ctx.globalCompositeOperation = 'destination-atop';\n        ctx.drawImage(results.image, 0, 0, width, height);\n    }\n\n\n    // Applies a grayscale effect\n    applyGrayscale(ctx) {\n        const {videoWidth: width, videoHeight: height} = this.videoElement;\n        const imageData = ctx.getImageData(0, 0, width, height);\n        const data = imageData.data;\n\n        for (let i = 0; i < data.length; i += 4) {\n            const avg = (data[i] + data[i + 1] + data[i + 2]) / 3;\n            data[i] = data[i + 1] = data[i + 2] = avg;\n        }\n\n        ctx.putImageData(imageData, 0, 0);\n    }\n\n    // Generates a list of available backgrounds\n    backgroundList() {\n        return {\n            color: [\n                {value: '#F9C0AB', alt: '#F9C0AB'},\n                {value: '#F4E0AF', alt: '#F4E0AF'},\n                {value: '#A8CD89', alt: '#A8CD89'},\n                {value: '#355F2E', alt: '#355F2E'},\n            ],\n            image: [\n                {value: 'img/1.jpg', alt: 'Image 1'},\n                {value: 'img/2.jpg', alt: 'Image 2'},\n                {value: 'img/3.jpg', alt: 'Image 3'},\n            ],\n        };\n    }\n\n    // Initializes the segmentation process\n    async setupSegmentation(ctx) {\n       const backgroundImage= this.getBackgroundImage()\n        await this.appendScriptToHead('https://cdn.jsdelivr.net/npm/@mediapipe/selfie_segmentation/selfie_segmentation.js', {\n            async: true,\n            callback: async () => {\n                if (!this.segmentation) {\n                    this.segmentation = new SelfieSegmentation({\n                        // locateFile: (file) => `/node_modules/@mediapipe/selfie_segmentation/${file}`,\n                        locateFile: (file) => `https://cdn.jsdelivr.net/npm/@mediapipe/selfie_segmentation/${file}`,\n                    });\n                    const isMobile = /Mobi|Android/i.test(navigator.userAgent);\n\n                    if (isMobile) {\n                        this.segmentation.setOptions({\n                            modelSelection: 0, // Lightweight model for mobile\n                        });\n\n                        this.videoElement.width = 480;\n                        this.videoElement.height = 360;\n                    } else {\n                        this.segmentation.setOptions({\n                            modelSelection: 1, // Full model for desktops\n                        });\n\n                        this.videoElement.width = 1280;\n                        this.videoElement.height = 720;\n                    }\n\n                    // this.segmentation.setOptions({\n                    //     selfieMode: true,\n                    //     modelSelection: 0,\n                    //\n                    //     // effect: \"background\"\n                    // });\n\n                    this.segmentation.onResults((results) => {\n                        console.log(results)\n                        if (this.color) {\n                            this.applyBackgroundColor(ctx, results);\n                            this.applyBrightnessAndContrast(ctx);\n                        } else {\n                            this.applyBackgroundImage(ctx, results, backgroundImage);\n\n                        }\n\n                        if (this.grayScale) {\n                            this.applyGrayscale(ctx);\n                        }\n                        // this.applyBrightnessAndContrast(ctx);\n                    });\n\n\n\n\n                    const targetFPS = 5;\n                    let lastFrameTime = 0;\n\n                    const processVideo = async () => {\n                        const now = performance.now();\n                        if (now - lastFrameTime >= 1000 / targetFPS) {\n                            lastFrameTime = now;\n                            await this.segmentation.send({ image: this.videoElement });\n                        }\n\n                        requestAnimationFrame(processVideo);\n                    };\n\n                    await processVideo();\n\n\n\n                    // await this.segmentation.initialize();\n                    //\n                    // const processVideo = async () => {\n                    //     await this.segmentation.send({image: this.videoElement});\n                    //     requestAnimationFrame(processVideo);\n                    // };\n                    //\n                    // await processVideo();\n                }\n                // if (!this.camera) {\n                //     this.camera = new Camera(this.videoElement, {\n                //         onFrame: async () => {\n                //             await this.segmentation.send({ image: this.videoElement });\n                //         },\n                //         width: 1280,\n                //         height: 720,\n                //     });\n                // }\n                //\n                // this.camera.start();\n            },\n        });\n    }\n\n    // Main function to modify the video stream\n    async changeBackground() {\n\n        console.log(  this.url,'11111')\n        if(!this.videoElement.srcObject) {\n            this.videoElement.srcObject = this.stream;\n            this.videoElement.play();\n            await new Promise((resolve) => (this.videoElement.onloadeddata = resolve));\n\n        }\n\n\n        const {videoWidth: width, videoHeight: height} = this.videoElement;\n        this.canvasElement.width = width;\n        this.canvasElement.height = height;\n        const ctx = this.canvasElement.getContext('2d');\n\n        if (!this.url && !this.grayScale && this.brightness === 1 && this.contrast === 1 && !this.color && !this.blur) {\n\n                this.camera?.stop()\n\n            return this.stream; // No modifications, return original stream\n        }\n\n        let backgroundImage = null;\n        if (this.url) {\n              backgroundImage = new Image();\n            backgroundImage.src = this.url;\n             await new Promise((resolve) => (backgroundImage.onload = resolve));\n            this.setBackgroundImage2(backgroundImage)\n\n        }\n        this.setBackgroundImage2(backgroundImage)\n        await this.setupSegmentation(ctx);\n        return  this.canvasElement.captureStream(24);\n    }\n}\n\nexport default WebrtcBgModifier;"],"names":["constructor","this","scriptLoaded","segmentation","url","camera","backgroundImage","color","stream","brightness","contrast","grayScale","blur","videoElement","document","createElement","canvasElement","setBackgroundImage2","value","getBackgroundImage","setBrightness","setContrast","setBlur","setGrayScale","setStream","setBackgroundImage","setBackgroundColor","appendScriptToHead","src","async","defer","callback","_exit","_this","_temp2","_result","script","onload","Promise","resolve","then","e","reject","onerror","console","error","head","appendChild","_temp","applyBackgroundImage","ctx","results","videoWidth","width","videoHeight","height","clearRect","filter","drawImage","segmentationMask","globalCompositeOperation","image","applyBrightnessAndContrast","applyBackgroundColor","fillStyle","fillRect","applyGrayscale","imageData","getImageData","data","i","length","putImageData","backgroundList","alt","setupSegmentation","_this2","_temp3","SelfieSegmentation","locateFile","file","test","navigator","userAgent","setOptions","modelSelection","onResults","log","targetFPS","lastFrameTime","processVideo","_temp5","requestAnimationFrame","now","performance","_temp4","send","changeBackground","_this3","_temp9","_temp7","captureStream","getContext","stop","_temp6","Image","_temp8","srcObject","play","onloadeddata"],"mappings":"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"}