{"version":3,"file":"index.umd.js","sources":["../src/index.js"],"sourcesContent":["class WebrtcBgModifier {\n    constructor({chatAgent = null}) {\n\n        console.log(chatAgent,\"chatAgent2\")\n\n        this.scriptLoaded = false;\n        this.segmentation = null;\n        this.bgUrl = null;\n        this.backgroundImage = null;\n        this.color = null;\n        this.chatAgent = chatAgent;\n        this.stream = null;\n        this.processing = false;\n        this.brightness = 1;\n        this.contrast = 1;\n        this.grayScale = false;\n        this.blur = 0;\n        this.fps = 24;\n        this.ctx = null;\n        this.isMobile = /Mobi|Android/i.test(navigator.userAgent);\n\n        this.videoInfo = {videoWidth: 640, videoHeight: 480};\n        this.videoElement = document.createElement(\"video\");\n        this.canvasElement = document.createElement(\"canvas\");\n        this.reaction = []\n        this.lastPushTime = 0;\n    }\n\n\n//private methods\n    drawReaction() {\n        if (this.reaction) {\n            this.reaction.map(data=>{\n\n             this.ctx.globalCompositeOperation = 'source-over';\n            const now = performance.now();\n            const elapsed = now - data.startTime;\n            // Remove the reaction if the duration has passed\n            if (elapsed > data.duration) {\n                data = null;\n                return;\n            }\n            // Calculate the fade-out effect (optional)\n            const progress = elapsed / data.duration;\n            this.ctx.globalAlpha = 1 - progress;\n\n            // Calculate the vertical movement (move from down to up)\n            const moveUpDistance = 300 * progress; // Adjust the distance as needed\n            const shakeAmount = 5 * Math.sin(now / 100); // Shake effect (change frequency as needed)\n\n            // Apply the shake and move-up effects to the position\n            const x = data.x + shakeAmount;\n            const y = data.y - moveUpDistance;\n\n            this.ctx.font = \"88px Arial\"; // Adjust size as needed\n            this.ctx.fillText(data.emoji, x, y);\n\n            // Reset globalAlpha for other drawings\n            this.ctx.globalAlpha = 1;\n            })\n\n        }\n    }\n\n    // Initializes the segmentation process\n    async setupSegmentation() {\n        const backgroundImage = this.getBackgroundImage()\n        await this.appendScriptToHead('https://cdn.jsdelivr.net/npm/@mediapipe/selfie_segmentation/selfie_segmentation.js', {\n            async: true,\n            callback: async () => {\n\n                if (!this.segmentation) {\n                    this.segmentation = new SelfieSegmentation({\n                        // locateFile: (file) => `/node_modules/@mediapipe/selfie_segmentation/${file}`,\n                        locateFile: (file) => `https://cdn.jsdelivr.net/npm/@mediapipe/selfie_segmentation/${file}`,\n                    });\n\n\n                    this.videoElement.width = this.isMobile ? 480 : 1280;\n                    this.videoElement.height = this.isMobile ? 360 : 720;\n\n                    this.segmentation.setOptions({\n                        modelSelection: 1,  // 1 means use the full-body segmentation model\n                        outputStride: 16,\n                        segmentBody: true,\n                        selfieMode: false,\n                        // modelSelection: this.isMobile ? 0 : 1, // Full model for desktops\n                    });\n\n\n                    this.segmentation.onResults((results) => {\n                        console.log(results)\n                        if (this.color) {\n                            this.applyBackgroundColor(results);\n                            this.applyBrightnessAndContrast();\n                        } else {\n                            this.applyBackgroundImage(results, backgroundImage);\n\n                        }\n                        this.applyGrayscale();\n                        // this.applyBrightnessAndContrast(ctx);\n                    });\n\n\n                    let lastFrameTime = 0;\n\n                    const processVideo = async () => {\n                        if (this.processing) {\n                            const now = performance.now();\n                            if (now - lastFrameTime >= 1000 / this.fps) {\n                                lastFrameTime = now;\n                                await this.segmentation.send({image: this.videoElement});\n                            }\n                        }\n\n                        requestAnimationFrame(processVideo);\n                    };\n\n                    await processVideo();\n\n\n                }\n\n            },\n        });\n    }\n\n    // Setters for background properties\n    setBackgroundImage2(value) {\n        this.backgroundImage = value;\n        return this;\n    }\n\n    // Appends a script to the document head, ensuring it loads only once\n    async appendScriptToHead(src, {\n        async = true, defer = false, callback = () => {\n        }\n    } = {}) {\n        if (this.scriptLoaded) {\n            await callback();\n            return;\n        }\n\n        const script = document.createElement('script');\n        script.src = src;\n        script.async = async;\n        script.defer = defer;\n        script.onload = async () => {\n            this.scriptLoaded = true;\n            await callback();\n        };\n        script.onerror = () => console.error(`Failed to load script: ${src}`);\n        document.head.appendChild(script);\n    }\n\n    // Handles background image replacement logic\n    applyBackgroundImage(results) {\n\n        const {videoWidth: width, videoHeight: height} = this.videoInfo;\n        // Check if segmentationMask and background are required to be drawn\n        if (!results.segmentationMask || !this.getBackgroundImage() && !this.videoElement) {\n            return; // No background or segmentation to apply, return early\n        }\n\n\n\n\n\n         // this.ctx.globalCompositeOperation = 'destination-over';\n\n         // this.ctx.clearRect(0, 0, width, height);\n         this.ctx.drawImage(results.segmentationMask, 0, 0, width, height);\n        this.ctx.globalCompositeOperation = 'source-out';\n\n        this.ctx.filter = `brightness(${this.brightness}) contrast(${this.contrast}) blur(${this.blur})`;\n\n\n        this.ctx.drawImage(this.getBackgroundImage() ? this.getBackgroundImage() : this.videoElement, 0, 0, width, height);\n\n        this.drawReaction();\n\n        this.ctx.globalCompositeOperation = 'destination-atop';\n        this.ctx.filter = `brightness(${this.brightness}) contrast(${this.contrast})`\n\n         this.ctx.drawImage(results.image, 0, 0, width, height);\n\n\n    }\n\n    // Adjusts brightness and contrast for the video\n    applyBrightnessAndContrast() {\n        this.ctx.filter = `brightness(${this.brightness}) contrast(${this.contrast}) `;\n    }\n\n    // Applies a solid background color\n    applyBackgroundColor(results) {\n\n        const {videoWidth: width, videoHeight: height} = this.videoInfo;\n\n        // this.ctx.clearRect(0, 0, width, height);\n\n        this.ctx.drawImage(results.segmentationMask, 0, 0, width, height);\n\n        this.ctx.globalCompositeOperation = 'source-out';\n\n        if (this.color !== this.ctx.fillStyle) {\n            this.ctx.fillStyle = this.color;\n        }\n\n        this.ctx.fillRect(0, 0, width, height);\n        this.drawReaction();\n\n        this.ctx.globalCompositeOperation = 'destination-atop';\n\n        this.ctx.drawImage(results.image, 0, 0, width, height);\n\n\n    }\n\n    // Applies a grayscale effect\n    applyGrayscale() {\n        if (this.grayScale) {\n            const {videoWidth: width, videoHeight: height} = this.videoInfo;\n            const imageData = this.ctx.getImageData(0, 0, width, height);\n            const data = imageData.data;\n            for (let i = 0; i < data.length; i += 4) {\n                const avg = (data[i] + data[i + 1] + data[i + 2]) / 3;\n                data[i] = data[i + 1] = data[i + 2] = avg;\n            }\n\n            this.ctx.putImageData(imageData, 0, 0);\n        }\n    }\n\n// end private methods\n\n\n\n\n    addReaction(emoji, x = 0, y = 0, duration = 2000) {\n\n        if(!this.segmentation){\n            console.error(\"Please use reaction after segmentation is available.\");\n        }else{\n            const currentTime = performance.now();\n\n            if (currentTime - this.lastPushTime >= 1000) {\n                this.reaction.push({\n                    emoji,\n                    x,\n                    y,\n                    startTime: performance.now(),\n                    duration\n                })\n                this.lastPushTime = currentTime;\n\n            }\n            else{\n                console.log(\"Waiting for 1 second to pass before adding another reaction.\");\n\n            }\n         }\n\n        return this;\n    }\n\n    setFps(value) {\n        this.fps = value;\n        return this;\n    }\n\n    getBackgroundImage() {\n        return this.backgroundImage\n    }\n\n    setBrightness(value) {\n        this.brightness = +value;\n        return this;\n    }\n\n    setContrast(value) {\n        this.contrast = +value;\n        return this;\n    }\n\n    setBlur(value) {\n        this.blur = +value + \"px\";\n        return this;\n    }\n\n    setGrayScale(value) {\n        this.grayScale = value;\n        return this;\n    }\n\n    setStream(stream) {\n        this.stream = stream;\n        return this;\n    }\n\n    setBackgroundImage(bgUrl) {\n        this.bgUrl = bgUrl;\n        this.color = null;\n        return this;\n    }\n\n    setBackgroundColor(color) {\n        this.color = color;\n        this.bgUrl = null;\n\n        return this;\n    }\n\n    // Generates a list of available backgrounds\n    backgroundList() {\n        return {\n            reactions: [\n                {value: '🎉'},\n                {value: '❤️'},\n                {value: '👍️'},\n                {value: '😊'},\n                {value: '😎'},\n                {value: '👎'},\n            ],\n            color: [\n                {value: '#f9c0ab', alt: '#F9C0AB'},\n                {value: '#f4e0af', alt: '#F4E0AF'},\n                {value: '#a8cd89', alt: '#A8CD89'},\n                {value: '#355f2e', alt: '#355F2E'},\n            ],\n            image: [\n                {value: 'https://alireza5014.github.io/webrtc-bg-modifier/example/img/1.jpg', alt: 'Image 1'},\n                {value: 'https://alireza5014.github.io/webrtc-bg-modifier/example/img/2.jpg', alt: 'Image 2'},\n                {value: 'https://alireza5014.github.io/webrtc-bg-modifier/example/img/3.jpg', alt: 'Image 113'},\n                {value: 'https://alireza5014.github.io/webrtc-bg-modifier/example/img/4.jpg', alt: 'Image 113'},\n                {value: 'https://alireza5014.github.io/webrtc-bg-modifier/example/img/5.webp', alt: 'Image 113'},\n                {value: 'https://alireza5014.github.io/webrtc-bg-modifier/example/img/6.jpg', alt: 'Image 113'},\n                {value: 'https://alireza5014.github.io/webrtc-bg-modifier/example/img/7.webp', alt: 'Image 113'},\n            ],\n        };\n    }\n\n    // Main function to modify the video stream\n    async changeBackground() {\n        // this.stream=chatAgent.deviceManager().mediaStreams.getVideoInput();\n        this.chatAgent.deviceManager().grantUserMediaDevicesPermissions({video: {width: this.videoInfo.videoWidth,height: this.videoInfo.videoHeight, framerate: 10}},     (result)=> {\n            console.log(result, \"result\")\n            this.stream=result.videoStream\n        if (!this.videoElement.srcObject) {\n            this.videoElement.srcObject = this.stream;\n              this.videoElement.play();\n            // await new Promise((resolve) => (this.videoElement.onloadeddata = resolve));\n            this.videoElement.addEventListener('loadedmetadata', () => {\n                this.videoInfo = {videoWidth: this.videoElement.videoWidth, videoHeight: this.videoElement.videoHeight};\n            });\n            const {videoWidth: width, videoHeight: height} = this.videoInfo;\n            this.canvasElement.width = width;\n            this.canvasElement.height = height;\n            this.ctx = this.canvasElement.getContext('2d');\n        }\n\n\n        if (!this.bgUrl && !this.grayScale && this.brightness === 1 && this.contrast === 1 && !this.color && !this.blur) {\n            this.processing = false;\n            this.chatAgent.replaceVideoStream(this.stream)\n\n            return this.stream; // No modifications, return original stream\n        }\n\n        let backgroundImage = null;\n        if (this.bgUrl) {\n            backgroundImage = new Image();\n            backgroundImage.crossOrigin = 'anonymous';\n            backgroundImage.src = this.bgUrl;\n            // await new Promise((resolve) => (backgroundImage.onload = resolve));\n        }\n        this.processing = true\n        this.setBackgroundImage2(backgroundImage)\n        this.setupSegmentation();\n        const newStream= this.canvasElement.captureStream(this.fps);\n\n        this.chatAgent.replaceVideoStream(newStream)\n        return  newStream;\n        })\n    }\n\n    async makePreview() {\n            if (!this.videoElement.srcObject) {\n                this.videoElement.srcObject = this.stream;\n                this.videoElement.play();\n                // await new Promise((resolve) => (this.videoElement.onloadeddata = resolve));\n                this.videoElement.addEventListener('loadedmetadata', () => {\n                    this.videoInfo = {videoWidth: this.videoElement.videoWidth, videoHeight: this.videoElement.videoHeight};\n                });\n                const {videoWidth: width, videoHeight: height} = this.videoInfo;\n                this.canvasElement.width = width;\n                this.canvasElement.height = height;\n                this.ctx = this.canvasElement.getContext('2d');\n            }\n\n             if (!this.bgUrl && !this.grayScale && this.brightness === 1 && this.contrast === 1 && !this.color && !this.blur  ) {\n                this.processing = false;\n\n                return this.stream; // No modifications, return original stream\n            }\n\n            let backgroundImage = null;\n            if (this.bgUrl) {\n                backgroundImage = new Image();\n                backgroundImage.crossOrigin = 'anonymous';\n                backgroundImage.src = this.bgUrl;\n                // await new Promise((resolve) => (backgroundImage.onload = resolve));\n            }\n            this.processing = true\n            this.setBackgroundImage2(backgroundImage)\n            this.setupSegmentation();\n            const newStream= this.canvasElement.captureStream(this.fps);\n\n            return  newStream;\n\n    }\n\n}\n\nexport default WebrtcBgModifier;"],"names":["constructor","chatAgent","console","log","this","scriptLoaded","segmentation","bgUrl","backgroundImage","color","stream","processing","brightness","contrast","grayScale","blur","fps","ctx","isMobile","test","navigator","userAgent","videoInfo","videoWidth","videoHeight","videoElement","document","createElement","canvasElement","reaction","lastPushTime","drawReaction","map","data","globalCompositeOperation","now","performance","elapsed","startTime","duration","progress","globalAlpha","moveUpDistance","shakeAmount","Math","sin","x","y","font","fillText","emoji","setupSegmentation","_this","getBackgroundImage","Promise","resolve","appendScriptToHead","async","callback","_temp","SelfieSegmentation","locateFile","file","width","height","setOptions","modelSelection","outputStride","segmentBody","selfieMode","onResults","results","applyBackgroundColor","applyBrightnessAndContrast","applyBackgroundImage","applyGrayscale","lastFrameTime","processVideo","_temp4","requestAnimationFrame","_temp3","_temp2","send","image","then","e","reject","setBackgroundImage2","value","src","defer","_exit","_this2","_temp6","_result","script","onload","onerror","error","head","appendChild","_temp5","segmentationMask","drawImage","filter","fillStyle","fillRect","imageData","getImageData","i","length","putImageData","addReaction","currentTime","push","setFps","setBrightness","setContrast","setBlur","setGrayScale","setStream","setBackgroundImage","setBackgroundColor","backgroundList","reactions","alt","changeBackground","_this3","deviceManager","grantUserMediaDevicesPermissions","video","framerate","result","videoStream","srcObject","play","addEventListener","getContext","replaceVideoStream","Image","crossOrigin","newStream","captureStream","makePreview","_this4"],"mappings":"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"}