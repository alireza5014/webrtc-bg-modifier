{"version":3,"file":"index.module.js","sources":["../src/index.js"],"sourcesContent":["class WebrtcBgModifier {\n    constructor() {\n        this.scriptLoaded = false;\n        this.segmentation = null;\n        this.url = null;\n        this.camera = null;\n        this.backgroundImage = null;\n        this.color = null;\n        this.stream = null;\n        this.processing = false;\n        this.brightness = 1;\n        this.contrast = 1;\n        this.grayScale = false;\n        this.blur = 0;\n        this.fps = 24;\n        this.ctx = null;\n        this.isMobile = /Mobi|Android/i.test(navigator.userAgent);\n\n        this.videoInfo = {videoWidth: 640, videoHeight: 480};\n        this.videoElement = document.createElement(\"video\");\n        this.canvasElement = document.createElement(\"canvas\");\n    }\n\n    setFps(value) {\n        this.fps = value;\n        return this;\n    }\n\n    // Setters for background properties\n    setBackgroundImage2(value) {\n        this.backgroundImage = value;\n        return this;\n    }\n\n    getBackgroundImage() {\n        return this.backgroundImage\n    }\n\n    setBrightness(value) {\n        this.brightness = +value;\n        return this;\n    }\n\n    setContrast(value) {\n        this.contrast = +value;\n        return this;\n    }\n\n    setBlur(value) {\n        this.blur = +value + \"px\";\n        return this;\n    }\n\n    setGrayScale(value) {\n        this.grayScale = value;\n        return this;\n    }\n\n    setStream(stream) {\n        this.stream = stream;\n        return this;\n    }\n\n    setBackgroundImage(url) {\n        this.url = url;\n        this.color = null;\n        return this;\n    }\n\n    setBackgroundColor(color) {\n        this.color = color;\n\n        return this;\n    }\n\n    // Appends a script to the document head, ensuring it loads only once\n    async appendScriptToHead(src, {\n        async = true, defer = false, callback = () => {\n        }\n    } = {}) {\n        if (this.scriptLoaded) {\n            await callback();\n            return;\n        }\n\n        const script = document.createElement('script');\n        script.src = src;\n        script.async = async;\n        script.defer = defer;\n        script.onload = async () => {\n            this.scriptLoaded = true;\n            await callback();\n        };\n        script.onerror = () => console.error(`Failed to load script: ${src}`);\n        document.head.appendChild(script);\n    }\n\n    // Handles background image replacement logic\n    applyBackgroundImage(results) {\n\n        const {videoWidth: width, videoHeight: height} = this.videoInfo;\n        // this.ctx.clearRect(0, 0, width, height);\n        // this.ctx.filter = `brightness(${this.brightness}) contrast(${this.contrast}) blur(${this.blur})`;\n        this.ctx.drawImage(results.segmentationMask, 0, 0, width, height);\n        this.ctx.globalCompositeOperation = 'source-out';\n        this.ctx.drawImage(this.getBackgroundImage() ? this.getBackgroundImage() : this.videoElement, 0, 0, width, height);\n        this.ctx.globalCompositeOperation = 'destination-atop';\n\n        // this.ctx.filter = `brightness(${this.brightness}) contrast(${this.contrast})`\n        // this.ctx.drawImage(results.image, 0, 0, width, height);\n\n    }\n\n    // Adjusts brightness and contrast for the video\n    applyBrightnessAndContrast() {\n        this.ctx.filter = `brightness(${this.brightness}) contrast(${this.contrast}) `;\n    }\n\n    // Applies a solid background color\n    applyBackgroundColor(results) {\n\n        const {videoWidth: width, videoHeight: height} = this.videoInfo;\n        // this.ctx.clearRect(0, 0, width, height);\n        this.ctx.drawImage(results.segmentationMask, 0, 0, width, height);\n        this.ctx.globalCompositeOperation = 'source-out';\n        if (this.color !== this.ctx.fillStyle) {\n            this.ctx.fillStyle = this.color;\n        }\n        this.ctx.fillRect(0, 0, width, height);\n        this.ctx.globalCompositeOperation = 'destination-atop';\n        this.ctx.drawImage(results.image, 0, 0, width, height);\n    }\n\n\n    // Applies a grayscale effect\n    applyGrayscale() {\n        const ctx = this.ctx;\n        const {videoWidth: width, videoHeight: height} = this.videoInfo;\n        const imageData = this.ctx.getImageData(0, 0, width, height);\n        const data = imageData.data;\n\n        for (let i = 0; i < data.length; i += 4) {\n            const avg = (data[i] + data[i + 1] + data[i + 2]) / 3;\n            data[i] = data[i + 1] = data[i + 2] = avg;\n        }\n\n        this.ctx.putImageData(imageData, 0, 0);\n    }\n\n    // Generates a list of available backgrounds\n    backgroundList() {\n        return {\n            color: [\n                {value: '#f9c0ab', alt: '#F9C0AB'},\n                {value: '#f4e0af', alt: '#F4E0AF'},\n                {value: '#a8cd89', alt: '#A8CD89'},\n                {value: '#355f2e', alt: '#355F2E'},\n            ],\n            image: [\n                {value: 'https://alireza5014.github.io/webrtc-bg-modifier/example/img/1.jpg', alt: 'Image 1'},\n                {value: 'https://alireza5014.github.io/webrtc-bg-modifier/example/img/2.jpg', alt: 'Image 2'},\n                {value: 'https://alireza5014.github.io/webrtc-bg-modifier/example/img/3.jpg', alt: 'Image 113'},\n                {value: 'https://alireza5014.github.io/webrtc-bg-modifier/example/img/4.jpg', alt: 'Image 113'},\n                {value: 'https://alireza5014.github.io/webrtc-bg-modifier/example/img/5.webp', alt: 'Image 113'},\n                {value: 'https://alireza5014.github.io/webrtc-bg-modifier/example/img/6.jpg', alt: 'Image 113'},\n                {value: 'https://alireza5014.github.io/webrtc-bg-modifier/example/img/7.webp', alt: 'Image 113'},\n            ],\n        };\n    }\n\n    // Initializes the segmentation process\n    async setupSegmentation(ctx) {\n        const backgroundImage = this.getBackgroundImage()\n        await this.appendScriptToHead('https://cdn.jsdelivr.net/npm/@mediapipe/selfie_segmentation/selfie_segmentation.js', {\n            async: true,\n            callback: async () => {\n                if (!this.segmentation) {\n                    this.segmentation = new SelfieSegmentation({\n                        // locateFile: (file) => `/node_modules/@mediapipe/selfie_segmentation/${file}`,\n                        locateFile: (file) => `https://cdn.jsdelivr.net/npm/@mediapipe/selfie_segmentation/${file}`,\n                    });\n\n\n                    this.videoElement.width = this.isMobile ? 480 : 1280;\n                    this.videoElement.height = this.isMobile ? 360 : 720;\n\n                    this.segmentation.setOptions({\n                        selfieMode: false,\n                        modelSelection: this.isMobile ? 0 : 1, // Full model for desktops\n                    });\n\n\n                    this.segmentation.onResults((results) => {\n                        // console.log(results)\n                        if (this.color) {\n                            this.applyBackgroundColor(results);\n                            this.applyBrightnessAndContrast();\n                        } else {\n                            this.applyBackgroundImage(results, backgroundImage);\n\n                        }\n\n                        if (this.grayScale) {\n                            this.applyGrayscale();\n                        }\n                        // this.applyBrightnessAndContrast(ctx);\n                    });\n\n\n                    let lastFrameTime = 0;\n\n                    const processVideo = async () => {\n                        if (this.processing) {\n                            const now = performance.now();\n                            if (now - lastFrameTime >= 1000 / this.fps) {\n                                lastFrameTime = now;\n                                await this.segmentation.send({image: this.videoElement});\n                            }\n                        }\n\n                        requestAnimationFrame(processVideo);\n                    };\n\n                    await processVideo();\n\n\n                }\n\n            },\n        });\n    }\n\n    // Main function to modify the video stream\n    async changeBackground() {\n\n        if (!this.videoElement.srcObject) {\n            this.videoElement.srcObject = this.stream;\n            await this.videoElement.play();\n            // await new Promise((resolve) => (this.videoElement.onloadeddata = resolve));\n            this.videoElement.addEventListener('loadedmetadata', () => {\n                this.videoInfo = {videoWidth: this.videoElement.videoWidth, videoHeight: this.videoElement.videoHeight};\n            });\n            const {videoWidth: width, videoHeight: height} = this.videoInfo;\n            this.canvasElement.width = width;\n            this.canvasElement.height = height;\n            this.ctx = this.canvasElement.getContext('2d');\n        }\n\n\n        if (!this.url && !this.grayScale && this.brightness === 1 && this.contrast === 1 && !this.color && !this.blur) {\n            this.processing = false;\n            return this.stream; // No modifications, return original stream\n        }\n\n        let backgroundImage = null;\n        if (this.url) {\n            backgroundImage = new Image();\n            backgroundImage.crossOrigin = 'anonymous';\n            backgroundImage.src = this.url;\n            // await new Promise((resolve) => (backgroundImage.onload = resolve));\n\n        }\n        this.processing = true\n        this.setBackgroundImage2(backgroundImage)\n        this.setupSegmentation();\n        return this.canvasElement.captureStream(this.fps);\n    }\n}\n\nexport default WebrtcBgModifier;"],"names":["WebrtcBgModifier","constructor","this","scriptLoaded","segmentation","url","camera","backgroundImage","color","stream","processing","brightness","contrast","grayScale","blur","fps","ctx","isMobile","test","navigator","userAgent","videoInfo","videoWidth","videoHeight","videoElement","document","createElement","canvasElement","setFps","value","setBackgroundImage2","getBackgroundImage","setBrightness","setContrast","setBlur","setGrayScale","setStream","setBackgroundImage","setBackgroundColor","appendScriptToHead","src","async","defer","callback","_exit","_this","_temp2","_result","script","onload","Promise","resolve","then","e","reject","onerror","console","error","head","appendChild","_temp","applyBackgroundImage","results","width","height","drawImage","segmentationMask","globalCompositeOperation","applyBrightnessAndContrast","filter","applyBackgroundColor","fillStyle","fillRect","image","applyGrayscale","imageData","getImageData","data","i","length","putImageData","backgroundList","alt","setupSegmentation","_this2","_temp3","SelfieSegmentation","locateFile","file","setOptions","selfieMode","modelSelection","onResults","lastFrameTime","processVideo","_temp6","requestAnimationFrame","_temp5","now","performance","_temp4","send","changeBackground","_this3","_temp8","Image","crossOrigin","captureStream","_temp7","srcObject","play","addEventListener","getContext"],"mappings":"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"}